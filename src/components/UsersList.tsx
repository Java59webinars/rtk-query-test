import { useState } from "react";
import { useGetUsersQuery, useCreateUserMutation } from "../api/usersApi";

function UsersList() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫, –∫–æ—Ç–æ—Ä—ã–π –º—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –∏–∑ `usersApi.ts`
    const { data: users, error, isLoading } = useGetUsersQuery();
    const [createUser] = useCreateUserMutation();
    const [name, setName] = useState(""); // üëà –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [email, setEmail] = useState(""); // üëà Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (isLoading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
    if (error) return <p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö</p>;

    const generateAvatar = (name: string) => {
        return `https://robohash.org/${name}-${Date.now()}.png`; // üëà –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π URL
    };

    const handleCreateUser = async () => {
        if (name.trim()) {
            try {
                await createUser({
                    name, // üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º `first_name`, –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ
                    email,
                    avatar: generateAvatar(name),
                }).unwrap();

                setName(""); // ‚úÖ –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                setEmail(""); // ‚úÖ –û—á–∏—â–∞–µ–º email –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            }
        }
    };

    return (
        <div>
            <h2>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
            <ul>
                {users?.map((user) => (
                    <li key={user.id}>
                        <img src={user.avatar} alt={user.name} width="50"/>
                        <span>{user.name} - {user.email || "–ù–µ—Ç email"}</span>
                    </li>
                ))}
            </ul>

    <h2>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
    <input
        type="text"
        placeholder="–ò–º—è"
        value={name}
        onChange={(e) => setName(e.target.value)}
    />
    <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
    />
    <button onClick={handleCreateUser}>–î–æ–±–∞–≤–∏—Ç—å</button>
</div>

);
};
export default UsersList;
